/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteShimi2Args } from "./DeleteShimi2Args";
import { Shimi2FindManyArgs } from "./Shimi2FindManyArgs";
import { Shimi2FindUniqueArgs } from "./Shimi2FindUniqueArgs";
import { Shimi2 } from "./Shimi2";
import { Shimi2Service } from "../shimi2.service";

@graphql.Resolver(() => Shimi2)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class Shimi2ResolverBase {
  constructor(
    protected readonly service: Shimi2Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Shimi2",
    action: "read",
    possession: "any",
  })
  async _shimi2sMeta(
    @graphql.Args() args: Shimi2FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Shimi2])
  @nestAccessControl.UseRoles({
    resource: "Shimi2",
    action: "read",
    possession: "any",
  })
  async shimi2s(@graphql.Args() args: Shimi2FindManyArgs): Promise<Shimi2[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Shimi2, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Shimi2",
    action: "read",
    possession: "own",
  })
  async shimi2(
    @graphql.Args() args: Shimi2FindUniqueArgs
  ): Promise<Shimi2 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Shimi2)
  @nestAccessControl.UseRoles({
    resource: "Shimi2",
    action: "delete",
    possession: "any",
  })
  async deleteShimi2(
    @graphql.Args() args: DeleteShimi2Args
  ): Promise<Shimi2 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
